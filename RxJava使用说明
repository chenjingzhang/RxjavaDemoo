一个java的VM上使用可观测的序列来组成异步的，基于事件的程序的库

 涉及到的核心名词:
   1.Observables(被观察者，事件源):Observables发出一系列(0个或者多个)事件
   2.Subscribers(观察者):Subscribers处理这些事件(执行Subscriber.onNext()或者Subscriber.onError())；
 3.RxJava线程调度：
       在不指定线程的情况下， RxJava 遵循的是线程不变的原则，
       即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。
      如果需要切换线程，就需要用到 Scheduler（调度器:线程控制器：RxJava 通过它来指定每一段代码应该运行在什么样的线程）。
     RxJava 已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：
     1.Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。
     2.Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。
     3.Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，
                        区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io()
                        比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。
     4.Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，
                                 即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，
                                 大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。
                                 另外， Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。


   备注： 使用 subscribeOn() 和 observeOn() 两个方法来对线程进行控制
     1.subscribeOn(): 指定 subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。
     或者叫做事件产生的线程。subscribeOn() 的位置放在哪里都可以，但它是只能调用一次的
     2.observeOn(): 指定 Subscriber 所运行在的线程。或者叫做事件消费的线程。
       observeOn() 指定的是它之后的操作所在的线程。
     因此如果有多次切换线程的需求，只要在每个想要切换线程的位置调用一次 observeOn()即可



